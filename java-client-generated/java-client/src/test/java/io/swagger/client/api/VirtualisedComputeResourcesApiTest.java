/*
 * MTP Manager API
 * MTP Manager API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import com.mtp.extinterface.nbi.swagger.model.AllocateComputeRequest;
import com.mtp.extinterface.nbi.swagger.model.CapacityInformation;
import com.mtp.extinterface.nbi.swagger.model.NfviPop;
import com.mtp.extinterface.nbi.swagger.model.ResourceZone;
import com.mtp.extinterface.nbi.swagger.model.VirtualCompute;
import com.mtp.extinterface.nbi.swagger.model.VirtualComputeFlavour;
import com.mtp.extinterface.nbi.swagger.model.VirtualComputeResourceInformation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualisedComputeResourcesApi
 */
@Ignore
public class VirtualisedComputeResourcesApiTest {

    private final VirtualisedComputeResourcesApi api = new VirtualisedComputeResourcesApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allocateComputeTest() throws ApiException {
        AllocateComputeRequest body = null;
        VirtualCompute response = api.allocateCompute(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFlavourTest() throws ApiException {
        VirtualComputeFlavour flavour = null;
        String response = api.createFlavour(flavour);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFlavoursTest() throws ApiException {
        String id = null;
        api.deleteFlavours(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryComputeCapacityTest() throws ApiException {
        String computeResourceTypeId = null;
        CapacityInformation response = api.queryComputeCapacity(computeResourceTypeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryComputeInformationTest() throws ApiException {
        String zoneId = null;
        List<VirtualComputeResourceInformation> response = api.queryComputeInformation(zoneId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryComputeResourceZoneTest() throws ApiException {
        List<ResourceZone> response = api.queryComputeResourceZone();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryFlavorsTest() throws ApiException {
        List<VirtualComputeFlavour> response = api.queryFlavors();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryNFVIPoPComputeInformationTest() throws ApiException {
        List<NfviPop> response = api.queryNFVIPoPComputeInformation();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryResourcesTest() throws ApiException {
        List<VirtualCompute> response = api.queryResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void terminateAbstractResourcesTest() throws ApiException {
        List<String> computeId = null;
        List<String> response = api.terminateAbstractResources(computeId);

        // TODO: test validations
    }
    
}
