# coding: utf-8

"""
    5GT-MTP PA API

    REST-API for the MTP PA. Find more at http://5g-transformer.eu  # noqa: E501

    OpenAPI spec version: 0.0.0
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pa.swagger_client.models.comp_route_output_item_inter_wan_links import CompRouteOutputItemInterWanLinks  # noqa: F401,E501
from pa.swagger_client.models.comp_route_output_item_nfvi_pop_resp import CompRouteOutputItemNfviPopResp  # noqa: F401,E501
from pa.swagger_client.models.comp_route_output_item_wan_paths import CompRouteOutputItemWanPaths  # noqa: F401,E501


class CompRouteOutputItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'req_bw': 'float',
        'latency': 'float',
        'inter_wan_links': 'list[CompRouteOutputItemInterWanLinks]',
        'wan_paths': 'list[CompRouteOutputItemWanPaths]',
        'nfvi_pop_resp': 'list[CompRouteOutputItemNfviPopResp]'
    }

    attribute_map = {
        'req_bw': 'reqBw',
        'latency': 'latency',
        'inter_wan_links': 'interWanLinks',
        'wan_paths': 'wanPaths',
        'nfvi_pop_resp': 'nfviPopResp'
    }

    def __init__(self, req_bw=None, latency=None, inter_wan_links=None, wan_paths=None, nfvi_pop_resp=None):  # noqa: E501
        """CompRouteOutputItem - a model defined in Swagger"""  # noqa: E501

        self._req_bw = None
        self._latency = None
        self._inter_wan_links = None
        self._wan_paths = None
        self._nfvi_pop_resp = None
        self.discriminator = None

        if req_bw is not None:
            self.req_bw = req_bw
        if latency is not None:
            self.latency = latency
        if inter_wan_links is not None:
            self.inter_wan_links = inter_wan_links
        self.wan_paths = wan_paths
        if nfvi_pop_resp is not None:
            self.nfvi_pop_resp = nfvi_pop_resp

    @property
    def req_bw(self):
        """Gets the req_bw of this CompRouteOutputItem.  # noqa: E501

        Value of requested/computed bandwidth for the interNfviPop connection (expressed in Mbps)  # noqa: E501

        :return: The req_bw of this CompRouteOutputItem.  # noqa: E501
        :rtype: float
        """
        return self._req_bw

    @req_bw.setter
    def req_bw(self, req_bw):
        """Sets the req_bw of this CompRouteOutputItem.

        Value of requested/computed bandwidth for the interNfviPop connection (expressed in Mbps)  # noqa: E501

        :param req_bw: The req_bw of this CompRouteOutputItem.  # noqa: E501
        :type: float
        """

        self._req_bw = req_bw

    @property
    def latency(self):
        """Gets the latency of this CompRouteOutputItem.  # noqa: E501

        Value of the computed end-to-end latency for the interNfviPop connections (expressed in ms)  # noqa: E501

        :return: The latency of this CompRouteOutputItem.  # noqa: E501
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this CompRouteOutputItem.

        Value of the computed end-to-end latency for the interNfviPop connections (expressed in ms)  # noqa: E501

        :param latency: The latency of this CompRouteOutputItem.  # noqa: E501
        :type: float
        """

        self._latency = latency

    @property
    def inter_wan_links(self):
        """Gets the inter_wan_links of this CompRouteOutputItem.  # noqa: E501


        :return: The inter_wan_links of this CompRouteOutputItem.  # noqa: E501
        :rtype: list[CompRouteOutputItemInterWanLinks]
        """
        return self._inter_wan_links

    @inter_wan_links.setter
    def inter_wan_links(self, inter_wan_links):
        """Sets the inter_wan_links of this CompRouteOutputItem.


        :param inter_wan_links: The inter_wan_links of this CompRouteOutputItem.  # noqa: E501
        :type: list[CompRouteOutputItemInterWanLinks]
        """

        self._inter_wan_links = inter_wan_links

    @property
    def wan_paths(self):
        """Gets the wan_paths of this CompRouteOutputItem.  # noqa: E501


        :return: The wan_paths of this CompRouteOutputItem.  # noqa: E501
        :rtype: list[CompRouteOutputItemWanPaths]
        """
        return self._wan_paths

    @wan_paths.setter
    def wan_paths(self, wan_paths):
        """Sets the wan_paths of this CompRouteOutputItem.


        :param wan_paths: The wan_paths of this CompRouteOutputItem.  # noqa: E501
        :type: list[CompRouteOutputItemWanPaths]
        """
        if wan_paths is None:
            raise ValueError("Invalid value for `wan_paths`, must not be `None`")  # noqa: E501

        self._wan_paths = wan_paths

    @property
    def nfvi_pop_resp(self):
        """Gets the nfvi_pop_resp of this CompRouteOutputItem.  # noqa: E501


        :return: The nfvi_pop_resp of this CompRouteOutputItem.  # noqa: E501
        :rtype: list[CompRouteOutputItemNfviPopResp]
        """
        return self._nfvi_pop_resp

    @nfvi_pop_resp.setter
    def nfvi_pop_resp(self, nfvi_pop_resp):
        """Sets the nfvi_pop_resp of this CompRouteOutputItem.


        :param nfvi_pop_resp: The nfvi_pop_resp of this CompRouteOutputItem.  # noqa: E501
        :type: list[CompRouteOutputItemNfviPopResp]
        """

        self._nfvi_pop_resp = nfvi_pop_resp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteOutputItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteOutputItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
