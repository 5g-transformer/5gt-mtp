# coding: utf-8

"""
    5GT-MTP PA API

    REST-API for the MTP PA. Find more at http://5g-transformer.eu  # noqa: E501

    OpenAPI spec version: 0.0.0
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pa.swagger_client.models.comp_route_output_item import CompRouteOutputItem  # noqa: F401,E501


class CompRouteOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inter_nfvi_connectivity_id': 'str',
        'num_comp_routes': 'float',
        'comp_routes': 'list[CompRouteOutputItem]'
    }

    attribute_map = {
        'inter_nfvi_connectivity_id': 'interNfviConnectivityId',
        'num_comp_routes': 'numCompRoutes',
        'comp_routes': 'compRoutes'
    }

    def __init__(self, inter_nfvi_connectivity_id=None, num_comp_routes=None, comp_routes=None):  # noqa: E501
        """CompRouteOutput - a model defined in Swagger"""  # noqa: E501

        self._inter_nfvi_connectivity_id = None
        self._num_comp_routes = None
        self._comp_routes = None
        self.discriminator = None

        self.inter_nfvi_connectivity_id = inter_nfvi_connectivity_id
        self.num_comp_routes = num_comp_routes
        if comp_routes is not None:
            self.comp_routes = comp_routes

    @property
    def inter_nfvi_connectivity_id(self):
        """Gets the inter_nfvi_connectivity_id of this CompRouteOutput.  # noqa: E501

        InterNfviPopId of the computed route  # noqa: E501

        :return: The inter_nfvi_connectivity_id of this CompRouteOutput.  # noqa: E501
        :rtype: str
        """
        return self._inter_nfvi_connectivity_id

    @inter_nfvi_connectivity_id.setter
    def inter_nfvi_connectivity_id(self, inter_nfvi_connectivity_id):
        """Sets the inter_nfvi_connectivity_id of this CompRouteOutput.

        InterNfviPopId of the computed route  # noqa: E501

        :param inter_nfvi_connectivity_id: The inter_nfvi_connectivity_id of this CompRouteOutput.  # noqa: E501
        :type: str
        """
        if inter_nfvi_connectivity_id is None:
            raise ValueError("Invalid value for `inter_nfvi_connectivity_id`, must not be `None`")  # noqa: E501

        self._inter_nfvi_connectivity_id = inter_nfvi_connectivity_id

    @property
    def num_comp_routes(self):
        """Gets the num_comp_routes of this CompRouteOutput.  # noqa: E501

        describing the number of computed routes for the passed srcPEid and dstPEId  # noqa: E501

        :return: The num_comp_routes of this CompRouteOutput.  # noqa: E501
        :rtype: float
        """
        return self._num_comp_routes

    @num_comp_routes.setter
    def num_comp_routes(self, num_comp_routes):
        """Sets the num_comp_routes of this CompRouteOutput.

        describing the number of computed routes for the passed srcPEid and dstPEId  # noqa: E501

        :param num_comp_routes: The num_comp_routes of this CompRouteOutput.  # noqa: E501
        :type: float
        """
        if num_comp_routes is None:
            raise ValueError("Invalid value for `num_comp_routes`, must not be `None`")  # noqa: E501

        self._num_comp_routes = num_comp_routes

    @property
    def comp_routes(self):
        """Gets the comp_routes of this CompRouteOutput.  # noqa: E501

        Set describing the features of each computed route  # noqa: E501

        :return: The comp_routes of this CompRouteOutput.  # noqa: E501
        :rtype: list[CompRouteOutputItem]
        """
        return self._comp_routes

    @comp_routes.setter
    def comp_routes(self, comp_routes):
        """Sets the comp_routes of this CompRouteOutput.

        Set describing the features of each computed route  # noqa: E501

        :param comp_routes: The comp_routes of this CompRouteOutput.  # noqa: E501
        :type: list[CompRouteOutputItem]
        """

        self._comp_routes = comp_routes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
