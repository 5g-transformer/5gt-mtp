# coding: utf-8

"""
    5GT-MTP PA API

    REST-API for the MTP PA. Find more at http://5g-transformer.eu  # noqa: E501

    OpenAPI spec version: 0.0.0
    Contact: cnd@lists.cttc.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pa.swagger_client.models.comp_route_input_abs_wan_topo import CompRouteInputAbsWanTopo  # noqa: F401,E501
from pa.swagger_client.models.comp_route_input_inter_wan_links import CompRouteInputInterWanLinks  # noqa: F401,E501
from pa.swagger_client.models.comp_route_input_nfvi_pop_reqs import CompRouteInputNfviPopReqs  # noqa: F401,E501
from pa.swagger_client.models.comp_route_input_nfvi_pops import CompRouteInputNfviPops  # noqa: F401,E501
from pa.swagger_client.models.comp_route_input_qos_cons import CompRouteInputQosCons  # noqa: F401,E501


class CompRouteInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pa_id': 'float',
        'k_paths': 'float',
        'src_pe_id': 'str',
        'dst_pe_id': 'str',
        'inter_wan_links': 'list[CompRouteInputInterWanLinks]',
        'abs_wan_topo': 'list[CompRouteInputAbsWanTopo]',
        'qos_cons': 'CompRouteInputQosCons',
        'nfvi_pops': 'list[CompRouteInputNfviPops]',
        'nfvi_pop_reqs': 'list[CompRouteInputNfviPopReqs]'
    }

    attribute_map = {
        'pa_id': 'paId',
        'k_paths': 'kPaths',
        'src_pe_id': 'srcPEId',
        'dst_pe_id': 'dstPEId',
        'inter_wan_links': 'interWanLinks',
        'abs_wan_topo': 'absWanTopo',
        'qos_cons': 'qosCons',
        'nfvi_pops': 'nfviPops',
        'nfvi_pop_reqs': 'nfviPopReqs'
    }

    def __init__(self, pa_id=None, k_paths=None, src_pe_id=None, dst_pe_id=None, inter_wan_links=None, abs_wan_topo=None, qos_cons=None, nfvi_pops=None, nfvi_pop_reqs=None):  # noqa: E501
        """CompRouteInput - a model defined in Swagger"""  # noqa: E501

        self._pa_id = None
        self._k_paths = None
        self._src_pe_id = None
        self._dst_pe_id = None
        self._inter_wan_links = None
        self._abs_wan_topo = None
        self._qos_cons = None
        self._nfvi_pops = None
        self._nfvi_pop_reqs = None
        self.discriminator = None

        self.pa_id = pa_id
        self.k_paths = k_paths
        self.src_pe_id = src_pe_id
        self.dst_pe_id = dst_pe_id
        self.inter_wan_links = inter_wan_links
        self.abs_wan_topo = abs_wan_topo
        self.qos_cons = qos_cons
        if nfvi_pops is not None:
            self.nfvi_pops = nfvi_pops
        if nfvi_pop_reqs is not None:
            self.nfvi_pop_reqs = nfvi_pop_reqs

    @property
    def pa_id(self):
        """Gets the pa_id of this CompRouteInput.  # noqa: E501

        Id of the PA algoerithm to be executed  # noqa: E501

        :return: The pa_id of this CompRouteInput.  # noqa: E501
        :rtype: float
        """
        return self._pa_id

    @pa_id.setter
    def pa_id(self, pa_id):
        """Sets the pa_id of this CompRouteInput.

        Id of the PA algoerithm to be executed  # noqa: E501

        :param pa_id: The pa_id of this CompRouteInput.  # noqa: E501
        :type: float
        """
        if pa_id is None:
            raise ValueError("Invalid value for `pa_id`, must not be `None`")  # noqa: E501

        self._pa_id = pa_id

    @property
    def k_paths(self):
        """Gets the k_paths of this CompRouteInput.  # noqa: E501

        Specifies the maximum number of paths to be computed between srcPEId and dstPEId  # noqa: E501

        :return: The k_paths of this CompRouteInput.  # noqa: E501
        :rtype: float
        """
        return self._k_paths

    @k_paths.setter
    def k_paths(self, k_paths):
        """Sets the k_paths of this CompRouteInput.

        Specifies the maximum number of paths to be computed between srcPEId and dstPEId  # noqa: E501

        :param k_paths: The k_paths of this CompRouteInput.  # noqa: E501
        :type: float
        """
        if k_paths is None:
            raise ValueError("Invalid value for `k_paths`, must not be `None`")  # noqa: E501

        self._k_paths = k_paths

    @property
    def src_pe_id(self):
        """Gets the src_pe_id of this CompRouteInput.  # noqa: E501

        source PE Id  # noqa: E501

        :return: The src_pe_id of this CompRouteInput.  # noqa: E501
        :rtype: str
        """
        return self._src_pe_id

    @src_pe_id.setter
    def src_pe_id(self, src_pe_id):
        """Sets the src_pe_id of this CompRouteInput.

        source PE Id  # noqa: E501

        :param src_pe_id: The src_pe_id of this CompRouteInput.  # noqa: E501
        :type: str
        """
        if src_pe_id is None:
            raise ValueError("Invalid value for `src_pe_id`, must not be `None`")  # noqa: E501

        self._src_pe_id = src_pe_id

    @property
    def dst_pe_id(self):
        """Gets the dst_pe_id of this CompRouteInput.  # noqa: E501

        destination PE Id  # noqa: E501

        :return: The dst_pe_id of this CompRouteInput.  # noqa: E501
        :rtype: str
        """
        return self._dst_pe_id

    @dst_pe_id.setter
    def dst_pe_id(self, dst_pe_id):
        """Sets the dst_pe_id of this CompRouteInput.

        destination PE Id  # noqa: E501

        :param dst_pe_id: The dst_pe_id of this CompRouteInput.  # noqa: E501
        :type: str
        """
        if dst_pe_id is None:
            raise ValueError("Invalid value for `dst_pe_id`, must not be `None`")  # noqa: E501

        self._dst_pe_id = dst_pe_id

    @property
    def inter_wan_links(self):
        """Gets the inter_wan_links of this CompRouteInput.  # noqa: E501


        :return: The inter_wan_links of this CompRouteInput.  # noqa: E501
        :rtype: list[CompRouteInputInterWanLinks]
        """
        return self._inter_wan_links

    @inter_wan_links.setter
    def inter_wan_links(self, inter_wan_links):
        """Sets the inter_wan_links of this CompRouteInput.


        :param inter_wan_links: The inter_wan_links of this CompRouteInput.  # noqa: E501
        :type: list[CompRouteInputInterWanLinks]
        """
        if inter_wan_links is None:
            raise ValueError("Invalid value for `inter_wan_links`, must not be `None`")  # noqa: E501

        self._inter_wan_links = inter_wan_links

    @property
    def abs_wan_topo(self):
        """Gets the abs_wan_topo of this CompRouteInput.  # noqa: E501


        :return: The abs_wan_topo of this CompRouteInput.  # noqa: E501
        :rtype: list[CompRouteInputAbsWanTopo]
        """
        return self._abs_wan_topo

    @abs_wan_topo.setter
    def abs_wan_topo(self, abs_wan_topo):
        """Sets the abs_wan_topo of this CompRouteInput.


        :param abs_wan_topo: The abs_wan_topo of this CompRouteInput.  # noqa: E501
        :type: list[CompRouteInputAbsWanTopo]
        """
        if abs_wan_topo is None:
            raise ValueError("Invalid value for `abs_wan_topo`, must not be `None`")  # noqa: E501

        self._abs_wan_topo = abs_wan_topo

    @property
    def qos_cons(self):
        """Gets the qos_cons of this CompRouteInput.  # noqa: E501


        :return: The qos_cons of this CompRouteInput.  # noqa: E501
        :rtype: CompRouteInputQosCons
        """
        return self._qos_cons

    @qos_cons.setter
    def qos_cons(self, qos_cons):
        """Sets the qos_cons of this CompRouteInput.


        :param qos_cons: The qos_cons of this CompRouteInput.  # noqa: E501
        :type: CompRouteInputQosCons
        """
        if qos_cons is None:
            raise ValueError("Invalid value for `qos_cons`, must not be `None`")  # noqa: E501

        self._qos_cons = qos_cons

    @property
    def nfvi_pops(self):
        """Gets the nfvi_pops of this CompRouteInput.  # noqa: E501


        :return: The nfvi_pops of this CompRouteInput.  # noqa: E501
        :rtype: list[CompRouteInputNfviPops]
        """
        return self._nfvi_pops

    @nfvi_pops.setter
    def nfvi_pops(self, nfvi_pops):
        """Sets the nfvi_pops of this CompRouteInput.


        :param nfvi_pops: The nfvi_pops of this CompRouteInput.  # noqa: E501
        :type: list[CompRouteInputNfviPops]
        """

        self._nfvi_pops = nfvi_pops

    @property
    def nfvi_pop_reqs(self):
        """Gets the nfvi_pop_reqs of this CompRouteInput.  # noqa: E501


        :return: The nfvi_pop_reqs of this CompRouteInput.  # noqa: E501
        :rtype: list[CompRouteInputNfviPopReqs]
        """
        return self._nfvi_pop_reqs

    @nfvi_pop_reqs.setter
    def nfvi_pop_reqs(self, nfvi_pop_reqs):
        """Sets the nfvi_pop_reqs of this CompRouteInput.


        :param nfvi_pop_reqs: The nfvi_pop_reqs of this CompRouteInput.  # noqa: E501
        :type: list[CompRouteInputNfviPopReqs]
        """

        self._nfvi_pop_reqs = nfvi_pop_reqs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompRouteInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompRouteInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
